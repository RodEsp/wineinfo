from pydantic import TypeAdapter
from .api import *
from .http_client import HttpClient

#
# FILE GENERATED BY api_stub_generator.py
#


class CatalogService:
    def __init__(self, caller: HttpClient):
        self.caller = caller

    def get_wine(self, request: GetWineRequest) -> List:
        return TypeAdapter(List).validate_python(
            self.caller.get(CATALOG_SERVICE["get_wine"]["path"], request.model_dump())
        )

    def get_all_wines_paginated(
        self, request: GetAllWinesPaginatedRequest
    ) -> PaginatedList[Wine]:
        return PaginatedList[Wine].model_validate(
            self.caller.get(
                CATALOG_SERVICE["get_all_wines_paginated"]["path"], request.model_dump()
            )
        )


class SearchService:
    def __init__(self, caller: HttpClient):
        self.caller = caller

    def search(self, request: SearchRequest) -> PaginatedList[int]:
        return PaginatedList[int].model_validate(
            self.caller.get(SEARCH_SERVICE["search"]["path"], request.model_dump())
        )


class RecsService:
    def __init__(self, caller: HttpClient):
        self.caller = caller

    def get_recommendations(self, request: RecsRequest) -> PaginatedList[int]:
        return PaginatedList[int].model_validate(
            self.caller.get(
                RECS_SERVICE["get_recommendations"]["path"], request.model_dump()
            )
        )


class PersistService:
    def __init__(self, caller: HttpClient):
        self.caller = caller

    def do_sql(self, request: SQLRequest) -> List:
        return TypeAdapter(List).validate_python(
            self.caller.post(PERSIST_SERVICE["do_sql"]["path"], request.model_dump())
        )
