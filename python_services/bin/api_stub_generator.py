import os, sys

sys.path.append(
    os.path.abspath(
        os.path.join(os.path.dirname(__file__), os.path.pardir, os.path.pardir)
    )
)
from typing import Dict, get_origin
from python_services.app.common.api import *


def snake_to_pascal(snake_str: str) -> str:
    components = snake_str.split("_")
    return "".join(x.title() for x in components)


def indent(text: str, level: int = 1) -> str:
    spaces = "    " * level
    return "\n".join(spaces + line if line else line for line in text.splitlines())


def validate_service_def(
    service_name: str, service_def: Dict[str, ServiceMethodDef]
) -> None:
    for method_name, method_def in service_def.items():
        params_type = method_def["params"]
        if params_type is not None and not (
            isinstance(params_type, type) and issubclass(params_type, BaseModel)
        ):
            raise ValueError(
                f"{service_name}.{method_name}: params must be a BaseModel, got {params_type}"
            )


def generate_method(service_name, method_name: str, method_def: dict) -> str:
    params_type = method_def["params"]
    response_type = method_def["response"]

    param_str = "" if params_type is None else f"request: {params_type.__name__}"
    request_var = "None" if params_type is None else "request.model_dump()"
    api_call = f"self.caller.{method_def['method'].lower()}({service_name}['{method_name}']['path'], {request_var})"

    if response_type is None:
        return_type = "None"
        body = api_call
    elif get_origin(response_type) == list:
        return_type = response_type.__name__
        body = f"TypeAdapter({return_type}).validate_python({api_call})"
    else:
        return_type = response_type.__name__
        body = f"{return_type}.model_validate({api_call})"

    return f"""
    def {method_name}(self, {param_str}) -> {return_type}:
       return {body}"""


def generate_remote_service(
    service_name: str, service_def: Dict[str, ServiceMethodDef]
) -> str:
    validate_service_def(service_name, service_def)
    methods = [
        indent(generate_method(service_name, name, defn))
        for name, defn in service_def.items()
    ]
    return f"""class {snake_to_pascal(service_name)}:
    def __init__(self, caller: HttpClient):
        self.caller = caller
{"\n".join(methods)}"""


services = {
    "CATALOG_SERVICE": CATALOG_SERVICE,
    "SEARCH_SERVICE": SEARCH_SERVICE,
    "RECS_SERVICE": RECS_SERVICE,
    "PERSIST_SERVICE": PERSIST_SERVICE,
}
print("""
from pydantic import TypeAdapter
from .api import *
from .http_client import HttpClient

#
# FILE GENERATED BY api_stub_generator.py
#          

""")
for name, definition in services.items():
    print(generate_remote_service(name, definition))
    print()
